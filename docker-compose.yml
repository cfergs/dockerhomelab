version: "3.7"

volumes:
  letsencrypt:

networks:
  frontend: #traefik entry point
    name: frontend
    driver: bridge
  mgmt_tier: #mgmt containers
    name: mgmt_tier
    driver: bridge
  auth_tier: #authelia container
    name: auth_tier
    driver: bridge
  database_tier: #openldap
    name: database_tier
    internal: true
  web_tier: # webservices, radarr, sonarr etc
    name: web_tier
    driver: bridge
  download_tier: #torrent, usenet etc
    name: download_tier
    driver: bridge

services:
#automatically update containers      
  watchtower:
    # options in https://hub.docker.com/r/v2tec/watchtower
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      - TZ=${TIMEZONE}
    networks:
      - mgmt_tier
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 6 * * *" --cleanup
    #--label-enable disable label checking
    labels:
      - traefik.enable=false #dump less stuff into logs if you debug
    restart: unless-stopped

#manage containers
  portainer:
    image: portainer/portainer
    container_name: portainer
    environment: 
      - PUID=${PUID}
      - PGID=${PGID}  
      - TZ=${TIMEZONE}
    networks:
      - mgmt_tier
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock 
      - /portainer_data:/data portainer/portainer
    labels:
      - traefik.http.routers.portainer.rule=Host(`${DOMAIN}`)&&PathPrefix(`/portainer`)
      - traefik.http.routers.portainer.entrypoints=websecure
      - traefik.http.routers.portainer.tls.certresolver=letsencrypt
      - traefik.http.routers.portainer.tls=true
      - traefik.http.middlewares.portainer-chain.chain.middlewares=sso-redirect,strip-prefix-1,strip-prefix-2
      - traefik.http.routers.portainer.middlewares=portainer-chain
    restart: unless-stopped

#update dns A records with IP changes
#Make sure to update ddclient.conf with DNS provider settings
  ddclient:
    image: linuxserver/ddclient
    container_name: ddclient
    environment:
      - PUID=${PUID}
      - PGID=${PGID}  
      - TZ=${TIMEZONE}
    networks:
      - mgmt_tier
    volumes:
      - ${CONFIG}/ddclient:/config
    labels:
      - traefik.enable=false #dump less stuff into logs if you debug
    restart: unless-stopped

#auth for SSO.
  ldap:
    image: osixia/openldap-backup:latest
    container_name: ldap
    command: 
      - --copy-service
    environment:
      - TZ=${TIMEZONE}
      - LDAP_ORGANISATION=OpenLDAP Domain
      - LDAP_DOMAIN=${DOMAIN}
      - LDAP_READONLY_USER=true
      - LDAP_READONLY_USER_USERNAME=ldap-ro
    networks:
        - database_tier
    env_file:
      - ./ldap/ldap.env
    volumes:
      - ${NONCOMPLIANTCONFIG}/ldap/db:/var/lib/ldap
      - ${NONCOMPLIANTCONFIG}/ldap/config:/etc/ldap/slapd.d
      - ${NONCOMPLIANTCONFIG}/ldap/backup:/data/backup #backs up every day @ 4am
      #pre-seed initial users. Optional. Won't override existing objects
      - ./ldap/00-startup.ldif:/container/service/slapd/assets/config/bootstrap/ldif/00-startup.ldif
    ports: 
      - 389:389
      - 636:636
    labels:
      - traefik.enable=false #dump less stuff into logs if you debug
    restart: unless-stopped

#web ui to manage LDAP
  phpldapadmin:
    image: osixia/phpldapadmin
    container_name: ldapadmin
    environment:
      - TZ=${TIMEZONE}
      - PHPLDAPADMIN_LDAP_HOSTS=ldap
      - PHPLDAPADMIN_SERVER_PATH=/phpldapadmin
      - PHPLDAPADMIN_TRUST_PROXY_SSL=true
      - PHPLDAPADMIN_HTTPS=false #otherwise wont work thru reverse proxy
    networks:
      - mgmt_tier
      - database_tier
    labels:
      - traefik.docker.network=mgmt_tier
      - traefik.http.routers.phpldapadmin.rule=Host(`${DOMAIN}`)&&PathPrefix(`/phpldapadmin`)
      - traefik.http.routers.phpldapadmin.entrypoints=websecure
      - traefik.http.routers.phpldapadmin.middlewares=sso-redirect
      - traefik.http.routers.phpldapadmin.tls.certresolver=letsencrypt
      - traefik.http.routers.phpldapadmin.tls=true
      - traefik.port=80
    restart: unless-stopped

#sso frontend
  authelia:
    image: authelia/authelia:master
    container_name: authelia
    environment:
      - TZ=${TIMEZONE}
      #- NODE_TLS_REJECT_UNAUTHORIZED=0 #TESTING ONLY
    env_file:
      - ./authelia/authelia.env
    networks:
      - auth_tier
      - database_tier
    volumes:
      - ./authelia/configuration.yml:/etc/authelia/configuration.yml
      - ${NONCOMPLIANTCONFIG}/authelia/db:/var/lib/authelia/
    labels:
      - traefik.docker.network=auth_tier
      - traefik.http.routers.auth.rule=Host(`${SSOAUTH_SUBDOMAIN}.${DOMAIN}`)
      - traefik.http.routers.auth.entrypoints=websecure
      - traefik.http.routers.auth.tls.certresolver=letsencrypt
      - traefik.http.routers.auth.tls=true
    restart: unless-stopped

#reverse proxy solution
  traefik:
    #https://docs.traefik.io/user-guides/docker-compose/basic-example/
    image: traefik
    container_name: traefik
    environment:
      - TZ=${TIMEZONE}
    command:
      #- --api.insecure=true #troubleshooting
      - --api.dashboard=true
      - --providers.docker=true
      - --log.Level=info
      - --accesslog=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker.exposedbydefault=true #expose containers by default.
      - --certificatesResolvers.letsencrypt.acme.email=${EMAIL}
      - --certificatesResolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesResolvers.letsencrypt.acme.tlsChallenge=true # used during the challenge, default is normally to use HTTP.
      #enable below URL when testing otherwise you hit letsencrypt limits around generating certs
      - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
    networks:
      - frontend
      - mgmt_tier
      - auth_tier
      - web_tier
      - download_tier
    volumes: 
      - letsencrypt:/letsencrypt/
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 80:80
      - 443:443
      #- 8080:8080 - troubleshooting
    labels:
      - traefik.docker.network=frontend
      # 1. Secure Traefik API (needed for dashboard)
      - traefik.http.routers.traefik-api.rule=Host(`${DOMAIN}`)&&PathPrefix(`/api`)
      - traefik.http.routers.traefik-api.entrypoints=websecure
      - traefik.http.routers.traefik-api.service=api@internal
      - traefik.http.routers.traefik-api.middlewares=sso-redirect
      - traefik.http.routers.traefik-api.tls.certresolver=letsencrypt
      - traefik.http.routers.traefik-api.tls=true
      # 1.5 Secure Traefik dashboard && not require extra / after /dashboard - will make it get a bit funky and add /dashboard/#/ but works!
      - traefik.http.routers.traefik-dashboard.rule=Host(`${DOMAIN}`)&&PathPrefix(`/dashboard`)
      - traefik.http.routers.traefik-dashboard.entrypoints=websecure
      - traefik.http.routers.traefik-dashboard.service=api@internal
      - traefik.http.middlewares.traefik-dashboard-chain.chain.middlewares=sso-redirect,strip-prefix-1,strip-prefix-2
      - traefik.http.routers.traefik-dashboard.middlewares=traefik-dashboard-chain
      - traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt
      - traefik.http.routers.traefik-dashboard.tls=true
      # 2. Global http to https redirect - REF https://blog.containo.us/traefik-2-0-docker-101-fc2893944b9d
      - traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.redirs.entrypoints=web
      - traefik.http.routers.redirs.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      # 3. Create sso-auth redirect
      - traefik.http.middlewares.sso-redirect.forwardauth.address=http://authelia:9091/api/verify?rd=https://${SSOAUTH_SUBDOMAIN}.${DOMAIN}/#/
      - traefik.http.middlewares.sso-redirect.forwardauth.trustforwardheader=true
      # 4. Basic auth authentication
      - traefik.http.middlewares.basicauth.basicauth.users=${BASICAUTH_USER}:${BASICAUTH_PASSWORD}
      # 5. Strip /url or /url/ prefixes
      # an issue occurs when chaining qbt with authelia where you need to refresh to continue. No issue with portainer
      # https://github.com/authelia/authelia/issues/372
      # prefixes taken from https://www.reddit.com/r/Traefik/comments/ezj88o/path_based_redirection_pain_and_suffering_v2/
      - traefik.http.middlewares.strip-prefix-1.redirectregex.regex=^(https?://[^/]+/[a-z0-9_]+)$$
      - traefik.http.middlewares.strip-prefix-1.redirectregex.replacement=$${1}/
      - traefik.http.middlewares.strip-prefix-1.redirectregex.permanent=true
      - traefik.http.middlewares.strip-prefix-2.stripprefixregex.regex=/[a-z0-9_]+
    restart: unless-stopped

#movie manager
  radarr:
    image: hotio/radarr
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    networks:
      - web_tier
      - download_tier
    volumes:
      - ${CONFIG}/radarr:/config/app
      - ${CONTENT}/downloads:/data/downloads
      - ${CONTENT}/media/movies:/data/media/movies
    labels:
      - traefik.docker.network=web_tier
      #must set Urlbase value in config.xml to /radarr otherwise won't work.
      #sso redirect
      - traefik.http.routers.radarr.rule=Host(`${DOMAIN}`)&&PathPrefix(`/radarr`)
      - traefik.http.routers.radarr.entrypoints=websecure
      - traefik.http.routers.radarr.middlewares=sso-redirect
      - traefik.http.routers.radarr.tls.certresolver=letsencrypt
      - traefik.http.routers.radarr.tls=true
      #api redirect to basicauth - easier to have seperate subdomain rather than seperate /api as /api used in www site- you would need to SSO then do basic auth
      - traefik.http.routers.radarr-api.rule=Host(`${BASICAUTH_SUBDOMAIN}.${DOMAIN}`)&&PathPrefix(`/radarr`)
      - traefik.http.routers.radarr-api.entrypoints=websecure
      - traefik.http.routers.radarr-api.middlewares=basicauth
      - traefik.http.routers.radarr-api.tls.certresolver=letsencrypt
      - traefik.http.routers.radarr-api.tls=true
    restart: unless-stopped

#tv show manager
  sonarr:
    image: hotio/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    networks:
      - web_tier
      - download_tier
    volumes:
      - ${CONFIG}/sonarr:/config/app
      - ${CONTENT}/downloads:/data/downloads
      - ${CONTENT}/media/tv:/data/media/tv
      - ${CONTENT}/media/cartoons:/data/media/cartoons
      - ${CONTENT}/media/anime:/data/media/anime
    labels:
      - traefik.docker.network=web_tier   
      #must set Urlbase value in config.xml to /sonarr otherwise won't work.
      #sso redirect
      - traefik.http.routers.sonarr.rule=Host(`${DOMAIN}`)&&PathPrefix(`/sonarr`)
      - traefik.http.routers.sonarr.entrypoints=websecure
      - traefik.http.routers.sonarr.middlewares=sso-redirect
      - traefik.http.routers.sonarr.tls.certresolver=letsencrypt
      - traefik.http.routers.sonarr.tls=true
      #api redirect to basicauth - easier to have seperate subdomain rather than seperate /api as /api used in www site- you would need to SSO then do basic auth
      - traefik.http.routers.sonarr-api.rule=Host(`${BASICAUTH_SUBDOMAIN}.${DOMAIN}`)&&PathPrefix(`/sonarr`)
      - traefik.http.routers.sonarr-api.entrypoints=websecure
      - traefik.http.routers.sonarr-api.middlewares=basicauth
      - traefik.http.routers.sonarr-api.tls.certresolver=letsencrypt
      - traefik.http.routers.sonarr-api.tls=true
    restart: unless-stopped

#subtitles download for sonarr and radarr (if your into that thing)
  bazarr:
    image: hotio/bazarr
    container_name: bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    networks:
      - web_tier
    volumes:
      - ${CONFIG}/bazarr:/config/app
      - ${CONTENT}/media/tv:/data/media/tv
      - ${CONTENT}/media/anime:/data/media/anime
      - ${CONTENT}/media/movies:/data/media/movies
    labels:
      #NOTE: 22/11/2019 - config.ini only generated when setup run- go to localhost:6767 and run thru config. change BaseURL to /subtitles
      #Alternatively if using an existing config.ini confirm base_url value in config.ini set to /subtitles/
      - traefik.http.routers.bazarr.rule=Host(`${DOMAIN}`)&&PathPrefix(`/subtitles`)
      - traefik.http.routers.bazarr.entrypoints=websecure
      - traefik.http.routers.bazarr.middlewares=sso-redirect
      - traefik.http.routers.bazarr.tls.certresolver=letsencrypt
      - traefik.http.routers.bazarr.tls=true
    restart: unless-stopped

#book downloader
  lazylibrarian:
    image: linuxserver/lazylibrarian
    container_name: lazylibrarian
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    networks:
      - web_tier
      - download_tier
    volumes:
      - ${CONFIG}/lazylibrarian:/config
      - ${CONTENT}/media/books:/books
      - ${CONTENT}/downloads:/data/downloads
    labels:
      - traefik.docker.network=web_tier  
      #must set http_root value in config.ini to /books otherwise won't work - add value if doesnt exist
      - traefik.http.routers.lazylibrarian.rule=Host(`${DOMAIN}`)&&PathPrefix(`/books`)
      - traefik.http.routers.lazylibrarian.entrypoints=websecure
      - traefik.http.routers.lazylibrarian.middlewares=sso-redirect
      - traefik.http.routers.lazylibrarian.tls.certresolver=letsencrypt
      - traefik.http.routers.lazylibrarian.tls=true
    restart: unless-stopped

#download comics
  mylar:
    image: linuxserver/mylar
    container_name: mylar
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    networks:
      - web_tier
      - download_tier
    volumes: 
      - ${CONFIG}/mylar:/config
      - ${CONTENT}/downloads:/data/downloads
      - ${CONTENT}/media/comics:/comics
    labels:
      - traefik.docker.network=web_tier  
      #must set http_root value in config.ini to /comics otherwise won't work.
      - traefik.http.routers.mylar.rule=Host(`${DOMAIN}`)&&PathPrefix(`/comics`)
      - traefik.http.routers.mylar.entrypoints=websecure
      - traefik.http.routers.mylar.middlewares=sso-redirect
      - traefik.http.routers.mylar.tls.certresolver=letsencrypt
      - traefik.http.routers.mylar.tls=true
    restart: unless-stopped

#search multiple usenet indexers at once
  nzbhydra:
    image: hotio/nzbhydra2
    container_name: nzbhydra
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    networks:
      - download_tier
    volumes:
      - ${CONFIG}/nzbhydra2:/config/app
      - ${CONTENT}/downloads/blackhole:/data/downloads/blackhole #for torrent files. NZB files use sab API
    labels:
      #must set urlBase value to "/hydra2" in nzbhydra.yml otherwise won't work.
      #sso redirect
      - traefik.http.routers.hydra2.rule=Host(`${DOMAIN}`)&&PathPrefix(`/hydra2`) 
      - traefik.http.routers.hydra2.entrypoints=websecure
      - traefik.http.routers.hydra2.middlewares=sso-redirect
      - traefik.http.routers.hydra2.tls.certresolver=letsencrypt
      - traefik.http.routers.hydra2.tls=true
      #api redirect to basicauth
      - traefik.http.routers.hydra2-api.rule=Host(`${BASICAUTH_SUBDOMAIN}.${DOMAIN}`)&&PathPrefix(`/hydra2`)
      - traefik.http.routers.hydra2-api.entrypoints=websecure
      - traefik.http.routers.hydra2-api.middlewares=basicauth
      - traefik.http.routers.hydra2-api.tls.certresolver=letsencrypt
      - traefik.http.routers.hydra2-api.tls=true
    restart: unless-stopped

#search multiple torrent trackers at once
  jackett:
    image: hotio/jackett
    container_name: jackett
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    networks:
      - web_tier
    volumes: 
      - ${CONFIG}/jackett:/config/app
      - ${CONTENT}/downloads/blackhole:/data/downloads/blackhole
    labels:
      #must set BasePathOverride value to "/jackett/" in ServerConfig.json otherwise won't work.
      #sso redirect
      - traefik.http.routers.jackett.rule=Host(`${DOMAIN}`)&&PathPrefix(`/jackett`)
      - traefik.http.routers.jackett.entrypoints=websecure
      - traefik.http.routers.jackett.middlewares=sso-redirect
      - traefik.http.routers.jackett.tls.certresolver=letsencrypt
      - traefik.http.routers.jackett.tls=true
      #api redirect to basicauth - easier to have seperate subdomain rather than seperate /api as /api used in www site- you would need to SSO then do basic auth
      - traefik.http.routers.jackett-api.rule=Host(`${BASICAUTH_SUBDOMAIN}.${DOMAIN}`)&&PathPrefix(`/jackett`)
      - traefik.http.routers.jackett-api.entrypoints=websecure
      - traefik.http.routers.jackett-api.middlewares=basicauth
      - traefik.http.routers.jackett-api.tls.certresolver=letsencrypt
      - traefik.http.routers.jackett-api.tls=true
    restart: unless-stopped

#download usenet files
  sabnzbd:
    image: hotio/sabnzbd
    container_name: sabnzbd
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    networks:
      - download_tier
    volumes:
      - ${CONFIG}/sabnzbd:/config/app
      - ${CONTENT}/downloads/usenet:/data/downloads/usenet
      #26/04/2020 you must change the complete/incomplete locations in the sabnzbd.ini 
      #otherwise will default to storing in /configs/Downloads/
      #container can't do it as sabnzbd.ini created AFTER container creation. volumes only map paths for use!
    labels:
      # must update host_whitelist value in sabnzbd.ini config to include website (EG: example.com) 
      #otherwise you get error "Access denied - Hostname verification failed"
      #sso redirect
      - traefik.http.routers.sabnzbd.rule=Host(`${DOMAIN}`)&&PathPrefix(`/sabnzbd`)
      - traefik.http.routers.sabnzbd.entrypoints=websecure
      - traefik.http.routers.sabnzbd.middlewares=sso-redirect
      - traefik.http.routers.sabnzbd.tls.certresolver=letsencrypt
      - traefik.http.routers.sabnzbd.tls=true
      #basic auth
      - traefik.http.routers.sabnzbd-api.rule=Host(`${BASICAUTH_SUBDOMAIN}.${DOMAIN}`)&&PathPrefix(`/sabnzbd`)
      - traefik.http.routers.sabnzbd-api.entrypoints=websecure
      - traefik.http.routers.sabnzbd-api.middlewares=basicauth
      - traefik.http.routers.sabnzbd-api.tls.certresolver=letsencrypt
      - traefik.http.routers.sabnzbd-api.tls=true
    restart: unless-stopped

  transmission:
    image: linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - TRANSMISSION_WEB_HOME=/transmission-web-control/
    networks:
      - download_tier
    volumes:
      - ${CONFIG}/transmission:/config
      - ${CONTENT}/downloads/torrents:/data/downloads/torrents #keeps usenet and torrent downloads seperated
      # plus transmission makes its own completed & incomplete subfolders
      - ${CONTENT}/downloads/blackhole:/watch
    labels:
      #must also update "rpc-host-whitelist-enabled" value as false in settings.json otherwise you cant access settings
      #sso redirect
      - traefik.http.routers.transmission.rule=Host(`${DOMAIN}`)&&PathPrefix(`/transmission`)
      - traefik.http.routers.transmission.entrypoints=websecure
      - traefik.http.routers.transmission.middlewares=sso-redirect
      - traefik.http.routers.transmission.tls.certresolver=letsencrypt
      - traefik.http.routers.transmission.tls=true
      #basic auth - /rpc is api but webui also uses this
      - traefik.http.routers.transmission-api.rule=Host(`${BASICAUTH_SUBDOMAIN}.${DOMAIN}`)&&PathPrefix(`/transmission`)
      - traefik.http.routers.transmission-api.entrypoints=websecure
      - traefik.http.routers.transmission-api.middlewares=basicauth
      - traefik.http.routers.transmission-api.tls.certresolver=letsencrypt
      - traefik.http.routers.transmission-api.tls=true
    restart: unless-stopped